// ******************************************************************************************** 
// Subroutine qui créer une table nommée Calendrier contenant les champs : 
// - [$(vChampDateCalendrier)]
// - Jour
// - Mois
// - Année
//
// Lors de la construction du calendrier, deux tables temporaires sont créées :
// - TempMinMaxDates
// - TempCalendrier
// Il est nécessaire de s'assurer que le script ne contient pas d'autres tables portant
// les mêmes noms lors de l'appel de la subroutine. La subroutine affichera une erreur
// et arrêtra le script de chargement si un table portant le même nom existe.
//
// :param vTableMinMax: Nom de la table dans laquelle chercher les dates minimum et maximum
// :param vDropTableMinMax: True() si on drop la table vTableMinMax, False() si on la garde
// :param vChampDate: Nom du champ date sur laquelle on construit un calendrier
// :param vChampDateCalendrier: Nom du champ date du calendrier
// ********************************************************************************************

Sub sub_calendrier(vTableMinMax, vDropTableMinMax, vChampDate, vChampDateCalendrier)
    
    // --------------------------------------------------------------------------------------------
    // Préconditions
    // La subroutine ThrowException n'existe pas, c'est un moyen pour arrêter le script de
    // chargment en affichant une erreur.
    // --------------------------------------------------------------------------------------------
    If Not IsNull(TableNumber('TempMinMaxDates')) Then 
    	Call ThrowException('La table TempMinMaxDates existe déjà, mais la subroutine sub_calendrier en a besoin.');
    ElseIf Not IsNull(TableNumber('TempCalendrier')) Then
    	Call ThrowException('La table TempCalendrier existe déjà, mais la subroutine sub_calendrier en a besoin.');
    End If
    
    // --------------------------------------------------------------------------------------------
    // Chercher de la plus petite et plus grande date
    // --------------------------------------------------------------------------------------------
    TempMinMaxDates:
    Load
        Min([$(vChampDate)]) as [MinDate],
        Max([$(vChampDate)]) as [MaxDate]
    Resident [$(vTableMinMax)];
    
    If '$(vDropTableMinMax)' = True() Then
    	Drop Table [$(vTableMinMax)];
	End If
    
    Let vMinDate = Num(Peek('MinDate', 0, 'TempMinMaxDates'));
    Let vMaxDate = Num(Peek('MaxDate', 0, 'TempMinMaxDates'));

    Drop Table TempMinMaxDates;

    // --------------------------------------------------------------------------------------------
    // Générer un calendrier temporaire contenant toutes les dates entre vMinDate et vMaxDate
    // --------------------------------------------------------------------------------------------
    TempCalendrier:
    Load
        $(vMinDate) + IterNo() - 1 as Num,
        Date($(vMinDate) + IterNo() - 1) as TempDate
    AutoGenerate 1 While $(vMinDate) + IterNo() - 1 <= $(vMaxDate);

    // --------------------------------------------------------------------------------------------
    // Construction du calendrier maître basé sur les dates générées ci-haut
    // Au besoin, ajouter tous autres traitements relatif aux dates nécessaire (trimestre,
    // semaine, jour de semaine, année fiscale, etc.)
    // --------------------------------------------------------------------------------------------
    Calendrier:
    Load 
        TempDate as [$(vChampDateCalendrier)],
        Month(TempDate) as Mois,
        Year(TempDate) as Année,
        Day(TempDate) as Jour
    Resident TempCalendrier;
    Drop Table TempCalendrier;

    // --------------------------------------------------------------------------------------------
    // Destruction des variables temporaires
    // --------------------------------------------------------------------------------------------
    Set vMinDate=;
    Set vMaxDate=;

End Sub;